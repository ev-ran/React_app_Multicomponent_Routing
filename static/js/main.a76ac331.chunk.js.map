{"version":3,"sources":["components/navigation/Navigation.js","components/welcome/Welcome.js","components/clock/Clock.js","components/contact/Contact.js","components/nothing404/Nothing404.js","components/testfetch/TestFetch.js","jeopardyService.js","components/display/Display.js","components/jeopardy/Jeopardy.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","className","to","Welcome","name","secondName","Clock","state","date","Date","this","setState","timerId","setInterval","tick","clearInterval","toDateString","toLocaleTimeString","React","Component","Contact","handleChange","event","formDataNew","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","NotFound","TestFetch","clickHandler","prevState","currentNumber","myTestFetch","currentCharacter","fetch","then","responseObject","json","characterJSON","console","log","catch","error","message","birth_year","gender","hair_color","JeopardyService","url","client","axios","create","get","categoryID","offsetNumber","Display","element","answer_in_game","result_for_question","title_of_question","question","points_for_question","category","undefined","stateJeop","dataM","map","data","i","key","title","id","showAnswer","answer","getCategoryID_0butt","getCategoryID_1butt","getCategoryID_2butt","score","question_number","user_answer","handleUserAnswer","handleSubmitAnswer","getSeveralQuestions","handleNewGame","Jeopardy","game_just_starts","question_answered","id_clicked","idd0","idd_choosen_cat","getArrayOfNewQuestions_ByCategoryId","idd1","idd2","getCategoryQuestions","result","dataByCat","arrLength","length","num","Math","floor","random","obj","getQuestionArray","idd","userAnswerNew","handleScore","trim","toLowerCase","getQuestion","App","exact","path","render","match","params","component","Nothing404","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a76ac331.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//import Link from react-dom-router\r\nimport { Link } from \"react-router-dom\";\r\nfunction Navigation(props) {\r\n    let name = \"Paul\";\r\n    let secondName = \"Stout\"\r\n    return (\r\n        <div className=\"Navigation\">\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link> </li>\r\n                <li><Link to=\"/clock\">Clock</Link></li>\r\n                <li><Link to=\"/contact\">Contact</Link> </li>\r\n                <li><Link to=\"/welcome\">Welcome</Link> </li>\r\n                <li><Link to={\"/welcome/Peter\"}>Welcome+Name</Link> </li>\r\n                <li><Link to={\"/welcome/\"+name}>Welcome+[name]</Link> </li>\r\n                <li><Link to={\"/welcome/\"+name+\"/\"+secondName}>Welcome+[name]+[sname]</Link> </li>\r\n                <li><Link to={\"/fetch\"}>TestFetch</Link></li>\r\n                <li><Link to={\"/jeopardy\"}>Jeopardy</Link></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default Navigation;","import React from 'react';\r\n\r\nfunction Welcome(props) {\r\n    return (\r\n        <div className='welcome'>\r\n            <h2>\r\n                Hello {props.name} {props.secondName}!\r\n            </h2>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Welcome;","import React from 'react'\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        this.timerId = setInterval(() => this.tick(), 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='Clock'>\r\n                \r\n                <h2>Live, today...  </h2>\r\n                <h4>\r\n                    {this.state.date.toDateString() } . . .   \r\n                     { this.state.date.toLocaleTimeString()}\r\n                     </h4>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","\r\n\r\nimport React from 'react';\r\n\r\nclass Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            formData: { firstName: '', lastName: '', },\r\n            submitted: false,\r\n        }\r\n    }\r\n\r\n    //===EVENT HANDLER==  TO UPDATE THE STATE\r\n    //to update the state. Use public class method - to serve all inputs. So no 'this.'\r\n    handleChange = (event) => {\r\n        // Cope the current state to variable. We4 should use spread operator - to make a real copy of state\r\n        // Copy, that create new object in memory\r\n        //   https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-\r\n        const formDataNew = {...this.state.formData};\r\n        // what should change? In our case event has name [event.target.name] - (firstName or secondName) \r\n        // and event has value [event.target.value] - (WHAT has been printed in the field)\r\n        //whatever change in form - will be take into consideration\r\n        formDataNew[event.target.name] = event.target.value;\r\n\r\n        //What we want to update  - in new point of state? we should to update the Form data\r\n\r\n        this.setState({ formData: formDataNew });\r\n    }\r\n\r\n    //===EVENT HANDLER==  TO PUSH BUTTON 'SUBMIT FORM\r\n    handleSubmit = (event) => {\r\n        //to prevent default actions for Submit button:\r\n        event.preventDefault();\r\n\r\n        this.setState({ submitted: true });\r\n    }\r\n\r\n    //===EVENT HANDLER==  TO PUSH BUTTON 'RESET FORM'\r\n    resetForm = (event) => {\r\n        this.setState({\r\n            formData: {firstName: '', lastName: ''},\r\n            submitted: false,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        //conditional rendering [ if - some condition - do this, other condition - do that]\r\n        if (this.state.submitted) {\r\n            return (\r\n                <div className=\"Contact\">\r\n                    <p>Thank you, {this.state.formData.firstName}, for submitting the form! </p>\r\n                    <button onClick={this.resetForm}>Reset Form</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"Contact\">\r\n                <form onSubmit={this.handleSubmit}>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"firstName\">FirstName</label>\r\n                        <input type=\"text\"\r\n                            name=\"firstName\"\r\n                            // all changes we put into state, so:\r\n                            value={this.state.formData.firstName}\r\n                            //add event LIstener - 'onChange' the value of field. handleChange - without ()!!! [NOT this.handleChange()]\r\n                            onChange={this.handleChange}\r\n                           \r\n                        />\r\n                    </div >\r\n\r\n                    <div>\r\n                        <label htmlFor=\"lastName\">LastName</label>\r\n                        <input type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={this.state.formData.lastName\r\n                            }\r\n                            onChange={this.handleChange}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <button>Submit Form</button>\r\n\r\n                </form>\r\n\r\n                {/* //just put the values of state - for fun*. It updates as we tipe/} */}\r\n                <br />\r\n                <div>{this.state.formData.firstName} </div>\r\n              \r\n                <div>{this.state.formData.lastName}</div>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Contact","import React from 'react';\r\nfunction NotFound(props) {\r\n\r\n    return (\r\n        <div className=\"nothing_404\">\r\n           <h2>404: Page not found</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react'\r\n\r\nclass TestFetch extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentCharacter: {},\r\n            currentNumber: 1,\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.myTestFetch();\r\n    }\r\n\r\n    myTestFetch() {\r\n        fetch(\"https://swapi.dev/api/people/\" + this.state.currentNumber)\r\n            .then(responseObject => responseObject.json()) //turn the JSON string into a JS object\r\n            .then(characterJSON => {\r\n                console.log(characterJSON);\r\n                this.setState({ currentCharacter: characterJSON })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.message)\r\n            })\r\n    }\r\n\r\n    clickHandler = () => {\r\n        this.setState((prevState, props) => {\r\n            return { currentNumber: prevState.currentNumber + 1 } // add \"1\" \r\n        }, this.myTestFetch)  // run myTestFetch() with new address\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"TestFetch\">\r\n                {/* Hi from TestFetch!!! */}\r\n              Name: {this.state.currentCharacter.name}\r\n                <br />\r\n              Birth_year: {this.state.currentCharacter.birth_year}\r\n                <br />\r\n              Gender: {this.state.currentCharacter.gender}\r\n                <br />\r\n               Hair_color: {this.state.currentCharacter.hair_color}\r\n                <button onClick={this.clickHandler}>Next Character</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default TestFetch;","//import the axios HTTP client to communicate with the API\r\nimport axios from 'axios';\r\nclass JeopardyService {\r\n    constructor(url = 'https://shrouded-mountain-15003.herokuapp.com/http://jservice.io/api/random', client = axios.create()){\r\n        this.url = url;\r\n        this.client = client;\r\n    }\r\n    getQuestion(){\r\n        return this.client.get(this.url);\r\n    }\r\n\r\n    getQuestionArray(){\r\n        return this.client.get(this.url + \"?count=3\");\r\n    }\r\n\r\n    getCategoryQuestions(categoryID){\r\n        return this.client.get(\"https://shrouded-mountain-15003.herokuapp.com/http://jservice.io/api/clues?category=\" + categoryID);\r\n    }\r\n\r\n    getCategories(){\r\n        return this.client.get(\"https://shrouded-mountain-15003.herokuapp.com/http://jservice.io/api/categories?count=3\");\r\n    }\r\n\r\n    getOffsetCategories(offsetNumber){\r\n        return this.client.get(\"https://shrouded-mountain-15003.herokuapp.com/http://jservice.io/api/categories?offset=\" + offsetNumber);\r\n    }\r\n\r\n}\r\nexport default JeopardyService;","import React from 'react'\r\nimport './Display.css'\r\nimport '../jeopardy/Jeopardy.css'\r\n\r\nfunction Display(props) {\r\n\r\n    let element = \"\";\r\n    let answer_in_game = \"\";\r\n    let result_for_question = \"\";\r\n    let title_of_question = \"\";\r\n    let question = \"\";\r\n    let points_for_question = \"\";\r\n    //=================================\r\n    let category = \"\";\r\n    let categoryID = \"\";\r\n\r\n    if (props.stateJeop.dataM !== undefined) {\r\n\r\n        category = props.stateJeop.dataM.map((data, i) => {\r\n\r\n            return <p key={i}> <span className=\"text\">Category: </span> \"{data.category.title}\"</p>\r\n        })\r\n        categoryID = props.stateJeop.dataM.map((data, i) => {\r\n            return <p key={i}>{data.category.id}</p>\r\n        })\r\n    }\r\n    // ==================================\r\n    if (props.stateJeop.showAnswer) {\r\n        answer_in_game = (\r\n            \"The answer is \\\" \" + props.stateJeop.data.answer + \"\\\"\"\r\n        );\r\n        result_for_question = props.stateJeop.result_for_question\r\n    }\r\n\r\n    if (props.stateJeop.data.category !== undefined) {\r\n\r\n        title_of_question = props.stateJeop.data.category.title;\r\n        question = props.stateJeop.data.question;\r\n        points_for_question = props.stateJeop.data.value;\r\n\r\n        element = (\r\n            <div>\r\n                [Answer for test: {props.stateJeop.data.answer}]\r\n                <p> {answer_in_game}. {result_for_question} </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"Display\">\r\n\r\n            <div className=\"categories\">\r\n                <button className=\"category_butt\" onClick={props.getCategoryID_0butt}>  {category[0]} </button>\r\n                <button className=\"category_butt\" onClick={props.getCategoryID_1butt}>  {category[1]} </button>\r\n                <button className=\"category_butt\" onClick={props.getCategoryID_2butt}>  {category[2]} </button>\r\n            </div>\r\n\r\n            <div className=\"line\"></div>\r\n            <div className=\"info_container\">\r\n\r\n                <div className=\"info_1\">\r\n                    <p> Current Score:  </p>\r\n                    <p> Answered Questions: </p>\r\n                    <p> Category Title: </p>\r\n                    <p>Point Value: </p>\r\n                    <p>Question: </p>\r\n                </div>\r\n                <div className=\"info_2\">\r\n                    <p> {props.stateJeop.score} </p>\r\n                    <p> {props.stateJeop.question_number}</p>\r\n                    <p> {title_of_question}</p>\r\n                    <p> {points_for_question}</p>\r\n                    <p> {question}</p>\r\n                </div>\r\n            </div>\r\n            {/* //============================ */}\r\n            <div className=\"line\"></div>\r\n            <div className=\"info_container\">\r\n                <div className=\"info_4\">\r\n                    <br />\r\n                    <label htmlFor=\"user_answer\"><p>Your answer: </p></label>\r\n                </div>\r\n\r\n                <div className=\"info_3\" >\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"user_answer\"\r\n                        value={props.stateJeop.user_answer}\r\n                        onChange={props.handleUserAnswer}\r\n                    />\r\n                    <button className=\"butt\" onClick={props.handleSubmitAnswer}>Submit answer</button>\r\n                </div>\r\n            </div>\r\n            {/* //============================ */}\r\n            <div className=\"line\"></div>\r\n            <div className=\"info_container\">\r\n\r\n                <div className=\"info_1\"></div>\r\n                <div className=\"info_2\">\r\n\r\n                    {element}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {/* <button className=\"butt\" onClick={props.getArrayOfNewQuestions_ByCategoryId}>Next question in Category</button> */}\r\n            <button className=\"butt\" onClick={props.getSeveralQuestions}>Change Categories</button>\r\n            <button className=\"butt\" onClick={props.handleNewGame} >Start New game</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Display;","import React from 'react';\r\n//import our service\r\nimport JeopardyService from \"../../jeopardyService\";\r\nimport Display from \"../display/Display\"\r\nimport \"./Jeopardy.css\"\r\n\r\nclass Jeopardy extends React.Component {\r\n    //set our initial state and set up our service as this.client on this component\r\n    constructor(props) {\r\n        super(props);\r\n        this.client = new JeopardyService();\r\n        this.state = {\r\n            data: {},\r\n            dataM: [], //new\r\n            idd0: 0, //new\r\n            idd1: 0, //new\r\n            idd2: 0, //new\r\n            idd_choosen_cat: 0,\r\n            dataByCat: [], //new array of questions choosen by category\r\n            score: 0,\r\n            question_number: 0,\r\n            user_answer: \"\",\r\n            answer: \"\",\r\n            showAnswer: false,\r\n            result_for_question: \"\",\r\n            question_answered: false,\r\n            game_just_starts: true,\r\n        }\r\n    }\r\n\r\n    getCategoryID_0butt = () => {\r\n\r\n        if (this.state.game_just_starts === true || this.state.question_answered === true) {\r\n\r\n            let id_clicked = this.state.idd0\r\n\r\n            this.setState({\r\n                idd_choosen_cat: id_clicked,\r\n\r\n            }, () => {\r\n                this.getArrayOfNewQuestions_ByCategoryId();\r\n            })\r\n        }\r\n    }\r\n\r\n    getCategoryID_1butt = () => {\r\n\r\n        if (this.state.game_just_starts === true || this.state.question_answered === true) {\r\n            let id_clicked = this.state.idd1\r\n\r\n            this.setState({\r\n                idd_choosen_cat: id_clicked,\r\n\r\n            }, () => {\r\n                this.getArrayOfNewQuestions_ByCategoryId();\r\n            })\r\n        }\r\n    }\r\n\r\n    getCategoryID_2butt = () => {\r\n\r\n        if (this.state.game_just_starts === true || this.state.question_answered === true) {\r\n\r\n            let id_clicked = this.state.idd2\r\n\r\n            this.setState({\r\n                idd_choosen_cat: id_clicked,\r\n\r\n            }, () => {\r\n                this.getArrayOfNewQuestions_ByCategoryId();\r\n            })\r\n        }\r\n    }\r\n\r\n    //get a new random question from the API and add it to the data object in state\r\n    getArrayOfNewQuestions_ByCategoryId = () => {\r\n\r\n        if (this.state.question_answered === true || (this.state.question_answered === false && this.state.game_just_starts === true)) {\r\n\r\n            let arr;\r\n            // let categoryID = 1972\r\n            let categoryID = this.state.idd_choosen_cat;\r\n\r\n            return this.client.getCategoryQuestions(categoryID).then(result => {\r\n\r\n                this.setState(() => {\r\n\r\n                    return { dataByCat: result.data }\r\n                })\r\n\r\n                let arrLength = this.state.dataByCat.length\r\n\r\n                console.log(\"number of question in this category:  \" + arrLength)\r\n\r\n                let num = Math.floor(Math.random() * arrLength);\r\n\r\n                console.log(\"number of choosen question:  \" + num);\r\n\r\n                const question = result.data.map((obj, i) => {\r\n                    return (obj)\r\n                })\r\n\r\n                this.setState((prevState, props) => {\r\n\r\n                    return {\r\n                        data: question[num],\r\n                        user_answer: \"\",\r\n                        answer: \"\",\r\n                        showAnswer: false,\r\n\r\n                    }\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    getSeveralQuestions = () => {\r\n\r\n        if (this.state.game_just_starts === true || this.state.question_answered === true) {\r\n\r\n            return this.client.getQuestionArray().then((result) => {\r\n\r\n                const idd = result.data.map((obj, i) => {\r\n\r\n                    // return <p key={i}> {obj.category.id}</p>\r\n                    return (obj.category.id)\r\n                })\r\n\r\n                this.setState(() => {\r\n\r\n                    return {\r\n                        dataM: result.data,\r\n                        idd0: idd[0], // ID of category gor the first member of array\r\n                        idd1: idd[1], // ID of category gor the second member of array\r\n                        idd2: idd[2], // ID of category gor the third member of array\r\n                        data: {},\r\n\r\n                        idd_choosen_cat: 0,\r\n                        dataByCat: [],\r\n                        user_answer: \"\",\r\n                        answer: \"\",\r\n                        showAnswer: false,\r\n                        result_for_question: \"\"\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //get random question\r\n    getNewQuestion() {\r\n        return this.client.getQuestion().then(result => {\r\n            this.setState({\r\n                data: result.data[0],\r\n                user_answer: \"\",\r\n                answer: \"\",\r\n                showAnswer: false,\r\n                result_for_question: \"\"\r\n            })\r\n            console.log()\r\n        })\r\n    }\r\n\r\n    //when the component mounts\r\n    componentDidMount() {\r\n        // this.getNewQuestion();\r\n        this.getSeveralQuestions();\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        this.getSeveralQuestions();\r\n        this.setState({\r\n            score: 0,\r\n            question_number: 0\r\n        })\r\n    }\r\n\r\n    handleUserAnswer = (event) => {\r\n        const userAnswerNew = event.target.value;\r\n        this.setState({ user_answer: userAnswerNew })\r\n\r\n    }\r\n\r\n    handleScore = (event) => {\r\n        console.log(\"Hi from handleScore!!!\")\r\n        if (this.state.user_answer === this.state.data.answer) {\r\n            console.log(\"Correct answer!!!\")\r\n        }\r\n        console.log(this.state.data.category.title)\r\n    }\r\n\r\n    handleSubmitAnswer = (event) => {\r\n        if (this.state.user_answer !== '') {\r\n\r\n            this.setState((prevState, props) => {\r\n\r\n                return {\r\n                    question_number: prevState.question_number + 1,\r\n                    question_answered: true,\r\n                    showAnswer: true,\r\n                    game_just_starts: false,\r\n                }\r\n            })\r\n\r\n\r\n            if (this.state.user_answer.trim().toLowerCase() === this.state.data.answer.trim().toLowerCase()) {\r\n                console.log(\"your answer is right!!\")\r\n\r\n                this.setState((prevState, props) => {\r\n                    // console.log(\"1--:::  \" + prevState.score);\r\n                    // console.log(\"2--:::  \" + this.state.data.value);\r\n                    return {\r\n                        score: prevState.score + this.state.data.value,\r\n                        result_for_question: \"Your answer is right!\"\r\n                    }\r\n                })\r\n\r\n            } else {\r\n                console.log(\"your answer is wrong!!!\")\r\n\r\n\r\n                this.setState((prevState, props) => {\r\n\r\n                    return {\r\n                        score: prevState.score - this.state.data.value,\r\n                        result_for_question: \"Your answer is wrong...\"\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    //display the results on the screen\r\n    render() {\r\n        // let element = \"\";\r\n        // let answer_in_game = \"\";\r\n        // let result_for_question = \"\";\r\n        // // let result_for_question = this.state.result_for_question;\r\n\r\n        // if (this.state.showAnswer) {\r\n        //     answer_in_game = (\r\n        //         \"The answer is \\\" \" + this.state.data.answer + \"\\\"\"\r\n\r\n        //     );\r\n\r\n        //     result_for_question = this.state.result_for_question\r\n        // }\r\n\r\n\r\n        // if (this.state.data.category !== undefined) {\r\n        //     element = (\r\n        //         <div>\r\n        //             Question#: {this.state.question_number}         Score: {this.state.score}\r\n        //             <br />\r\n        //             Title: {this.state.data.category.title}\r\n        //             <br />\r\n        //             Question: {this.state.data.question}\r\n        //             <br />\r\n        //             Point Value: {this.state.data.value}\r\n        //             <br />\r\n        //             <label htmlFor=\"user_answer\">Your answer?</label>\r\n\r\n        //             <input\r\n        //                 type=\"text\"\r\n        //                 name=\"user_answer\"\r\n        //                 value={this.state.user_answer}\r\n        //                 onChange={this.handleUserAnswer}\r\n        //             />\r\n\r\n\r\n        //             <button className=\"butt\" onClick={this.handleSubmitAnswer}>Show answer</button>\r\n        //             <br />\r\n        //             {answer_in_game}\r\n        //             <br />\r\n        //             {result_for_question}\r\n        //             <br />\r\n        //             [Answer for test: {this.state.data.answer}]\r\n\r\n        //             <div id=\"answer_is_right\">\r\n        //                 Is your answer correct?\r\n        //             <br />\r\n        //                 <button className=\"butt\" onClick={this.handleCorrectAnswer} >correct</button>\r\n        //                 <button className=\"butt\" onClick={this.handleWrongAnswer} >wrong</button>\r\n        //             </div>\r\n        //             <button className=\"butt\" onClick={this.nextQuestion} >Next question</button>\r\n        //             <button className=\"butt\" onClick={this.handleNewGame} >Start New game</button>\r\n\r\n\r\n        //         </div>\r\n        //     )\r\n        // }\r\n\r\n\r\n        // let arr = this.state.data.category\r\n        // console.log(\"***\" + arr)\r\n        //=====================================\r\n        // let category = \"\";\r\n        // let categoryID = \"\";\r\n\r\n        // if (this.state.dataM !== undefined) {\r\n\r\n        //     category = this.state.dataM.map((data, i) => {\r\n\r\n        //         return <p key={i}>{data.category.title}</p>\r\n\r\n        //     })\r\n\r\n        //     categoryID = this.state.dataM.map((data, i) => {\r\n        //         return <p key={i}>{data.category.id}</p>\r\n        //     })\r\n\r\n        // }\r\n\r\n        //=================================\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Display\r\n\r\n                    stateJeop={this.state}\r\n\r\n                    handleUserAnswer={this.handleUserAnswer}\r\n                    handleSubmitAnswer={this.handleSubmitAnswer}\r\n                    handleNewGame={this.handleNewGame}\r\n\r\n                    getCategoryID_0butt={this.getCategoryID_0butt}\r\n                    getCategoryID_1butt={this.getCategoryID_1butt}\r\n                    getCategoryID_2butt={this.getCategoryID_2butt}\r\n                    getSeveralQuestions={this.getSeveralQuestions}\r\n                    getArrayOfNewQuestions_ByCategoryId={this.getArrayOfNewQuestions_ByCategoryId}\r\n\r\n                />\r\n               \r\n            </div >\r\n\r\n        );\r\n\r\n    }\r\n}\r\nexport default Jeopardy;","import React, { Component } from 'react';\n\n//Import the Route component\nimport { Route, Switch } from \"react-router-dom\";\n\n//Import the Navigation component\nimport Navigation from \"./components/navigation/Navigation\";\n\nimport './App.css';\nimport Welcome from './components/welcome/Welcome';\nimport Clock from './components/clock/Clock';\nimport Contact from './components/contact/Contact';\nimport Nothing404 from './components/nothing404/Nothing404';\nimport TestFetch from './components/testfetch/TestFetch'\nimport Jeopardy from './components/jeopardy/Jeopardy';\n\n\nclass App extends Component {\n  render() {\n    // let name = \"Abracadabra\";\n    return (\n      <div className=\"App\">\n        {/* render the Navigation component */}\n        <Navigation />\n\n        <Switch>\n\n          {/* define our rotes */}\n\n          <Route exact path=\"/\" render={(props) => <Welcome {...props} name=\"on root/home Page\" />} />\n\n          <Route exact path=\"/welcome\" render={(props) => <Welcome {...props} name=\"! Welcome Everybody!\" />} />\n\n          <Route exact path=\"/welcome/:name\"\n            render={(props) => <Welcome {...props} name={props.match.params.name} />}\n          />\n\n          <Route path=\"/welcome/:name/:secondName\"\n            render={(props) => <Welcome {...props} name={props.match.params.name}\n              secondName={props.match.params.secondName} />}\n          />\n\n          <Route  path=\"/clock\" component={Clock} />\n          <Route  path=\"/contact\" component={Contact} />\n          <Route path=\"/fetch\" component={TestFetch}/>\n          <Route path=\"/jeopardy\" component={Jeopardy} />\n          <Route path=\"*\" component={Nothing404} />\n\n        </Switch>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n//import browser router so we can use it in our application\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/React_app_Multicomponent_Routing\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}