{"version":3,"sources":["components/navigation/Navigation.js","components/welcome/Welcome.js","components/clock/Clock.js","components/contact/Contact.js","components/nothing404/Nothing404.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","className","to","Welcome","name","secondName","Clock","state","date","Date","this","setState","timerId","setInterval","tick","clearInterval","toDateString","toLocaleTimeString","React","Component","Contact","handleChange","event","formDataNew","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","NotFound","App","exact","path","render","match","params","exect","component","Nothing404","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ee2f41a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//import Link from react-dom-router\r\nimport { Link } from \"react-router-dom\";\r\nfunction Navigation(props) {\r\n    let name = \"Paul\";\r\n    let secondName = \"Stout\"\r\n    return (\r\n        <div className=\"Navigation\">\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link> </li>\r\n                <li><Link to=\"/clock\">Clock</Link></li>\r\n                <li><Link to=\"/contact\">Contact</Link> </li>\r\n                <li><Link to=\"/welcome\">Welcome</Link> </li>\r\n                <li><Link to={\"/welcome/Peter\"}>Welcome+Name</Link> </li>\r\n                <li><Link to={\"/welcome/\"+name}>Welcome+[name]</Link> </li>\r\n                <li><Link to={\"/welcome/\"+name+\"/\"+secondName}>Welcome+[name]+[sname]</Link> </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default Navigation;","import React from 'react';\r\n\r\nfunction Welcome(props) {\r\n    return (\r\n        <div className='welcome'>\r\n            <h2>\r\n                Hello {props.name} {props.secondName}!\r\n            </h2>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Welcome;","import React from 'react'\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        this.timerId = setInterval(() => this.tick(), 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='Clock'>\r\n                \r\n                <h2>Live, today...  </h2>\r\n                <h4>\r\n                    {this.state.date.toDateString() } . . .   \r\n                     { this.state.date.toLocaleTimeString()}\r\n                     </h4>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","\r\n\r\nimport React from 'react';\r\n\r\nclass Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            formData: { firstName: '', lastName: '', },\r\n            submitted: false,\r\n        }\r\n    }\r\n\r\n    //===EVENT HANDLER==  TO UPDATE THE STATE\r\n    //to update the state. Use public class method - to serve all inputs. So no 'this.'\r\n    handleChange = (event) => {\r\n        // Cope the current state to variable. We4 should use spread operator - to make a real copy of state\r\n        // Copy, that create new object in memory\r\n        //   https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-\r\n        const formDataNew = {...this.state.formData};\r\n        // what should change? In our case event has name [event.target.name] - (firstName or secondName) \r\n        // and event has value [event.target.value] - (WHAT has been printed in the field)\r\n        //whatever change in form - will be take into consideration\r\n        formDataNew[event.target.name] = event.target.value;\r\n\r\n        //What we want to update  - in new point of state? we should to update the Form data\r\n\r\n        this.setState({ formData: formDataNew });\r\n    }\r\n\r\n    //===EVENT HANDLER==  TO PUSH BUTTON 'SUBMIT FORM\r\n    handleSubmit = (event) => {\r\n        //to prevent default actions for Submit button:\r\n        event.preventDefault();\r\n\r\n        this.setState({ submitted: true });\r\n    }\r\n\r\n    //===EVENT HANDLER==  TO PUSH BUTTON 'RESET FORM'\r\n    resetForm = (event) => {\r\n        this.setState({\r\n            formData: {firstName: '', lastName: ''},\r\n            submitted: false,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        //conditional rendering [ if - some condition - do this, other condition - do that]\r\n        if (this.state.submitted) {\r\n            return (\r\n                <div className=\"Contact\">\r\n                    <p>Thank you, {this.state.formData.firstName}, for submitting the form! </p>\r\n                    <button onClick={this.resetForm}>Reset Form</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"Contact\">\r\n                <form onSubmit={this.handleSubmit}>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"firstName\">FirstName</label>\r\n                        <input type=\"text\"\r\n                            name=\"firstName\"\r\n                            // all changes we put into state, so:\r\n                            value={this.state.formData.firstName}\r\n                            //add event LIstener - 'onChange' the value of field. handleChange - without ()!!! [NOT this.handleChange()]\r\n                            onChange={this.handleChange}\r\n                           \r\n                        />\r\n                    </div >\r\n\r\n                    <div>\r\n                        <label htmlFor=\"lastName\">LastName</label>\r\n                        <input type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={this.state.formData.lastName\r\n                            }\r\n                            onChange={this.handleChange}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <button>Submit Form</button>\r\n\r\n                </form>\r\n\r\n                {/* //just put the values of state - for fun*. It updates as we tipe/} */}\r\n                <br />\r\n                <div>{this.state.formData.firstName} </div>\r\n              \r\n                <div>{this.state.formData.lastName}</div>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Contact","import React from 'react';\r\nfunction NotFound(props) {\r\n\r\n    return (\r\n        <div className=\"nothing_404\">\r\n           <h2>404: Page not found</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\n\n//Import the Route component\nimport { Route, Switch } from \"react-router-dom\";\n\n//Import the Navigation component\nimport Navigation from \"./components/navigation/Navigation\";\n\nimport './App.css';\nimport Welcome from './components/welcome/Welcome';\nimport Clock from './components/clock/Clock';\nimport Contact from './components/contact/Contact';\nimport Nothing404 from './components/nothing404/Nothing404';\n\n\nclass App extends Component {\n  render() {\n    // let name = \"Abracadabra\";\n    return (\n      <div className=\"App\">\n        {/* render the Navigation component */}\n        <Navigation />\n\n        <Switch>\n\n          {/* define our rotes */}\n\n          <Route exact path=\"/\" render={(props) => <Welcome {...props} name=\"on root/home Page\" />} />\n\n          <Route exact path=\"/welcome\" render={(props) => <Welcome {...props} name=\"! Welcome Everybody!\" />} />\n\n          <Route exact path=\"/welcome/:name\"\n            render={(props) => <Welcome {...props} name={props.match.params.name} />}\n          />\n\n          <Route exect path=\"/welcome/:name/:secondName\"\n            render={(props) => <Welcome {...props} name={props.match.params.name}\n              secondName={props.match.params.secondName} />}\n          />\n\n          <Route exact path=\"/clock\" component={Clock} />\n          <Route exact path=\"/contact\" component={Contact} />\n          <Route path=\"*\" component={Nothing404} />\n\n        </Switch>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n//import browser router so we can use it in our application\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/React_app_Multicomponent_Routing/\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}